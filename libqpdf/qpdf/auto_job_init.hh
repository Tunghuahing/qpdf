//
// This file is automatically generated by generate_auto_job.
// Edits will be automatically overwritten if the build is
// run in maintainer mode.
//
auto b = [this](void (ArgParser::*f)()) {
    return QPDFArgParser::bindBare(f, this);
};
auto p = [this](void (ArgParser::*f)(char *)) {
    return QPDFArgParser::bindParam(f, this);
};

char const* yn_choices[] = {"y", "n", 0};
char const* password_mode_choices[] = {"bytes", "hex-bytes", "unicode", "auto", 0};
char const* stream_data_choices[] = {"compress", "preserve", "uncompress", 0};
char const* decode_level_choices[] = {"none", "generalized", "specialized", "all", 0};
char const* object_streams_choices[] = {"disable", "preserve", "generate", 0};
char const* remove_unref_choices[] = {"auto", "yes", "no", 0};
char const* flatten_choices[] = {"all", "print", "screen", 0};
char const* json_key_choices[] = {"acroform", "attachments", "encrypt", "objectinfo", "objects", "outlines", "pagelabels", "pages", 0};
char const* print128_choices[] = {"full", "low", "none", 0};
char const* modify128_choices[] = {"all", "annotate", "form", "assembly", "none", 0};

this->ap.selectHelpOptionTable();
this->ap.addBare("version", b(&ArgParser::argVersion));
this->ap.addBare("copyright", b(&ArgParser::argCopyright));
this->ap.addBare("json-help", b(&ArgParser::argJsonHelp));
this->ap.addBare("show-crypto", b(&ArgParser::argShowCrypto));
this->ap.addBare("job-json-help", b(&ArgParser::argJobJsonHelp));
this->ap.selectMainOptionTable();
this->ap.addPositional(p(&ArgParser::argPositional));
this->ap.addBare("add-attachment", b(&ArgParser::argAddAttachment));
this->ap.addBare("allow-weak-crypto", [this](){jc.allowWeakCrypto();});
this->ap.addBare("check", [this](){jc.check();});
this->ap.addBare("check-linearization", [this](){jc.checkLinearization();});
this->ap.addBare("coalesce-contents", [this](){jc.coalesceContents();});
this->ap.addBare("copy-attachments-from", b(&ArgParser::argCopyAttachmentsFrom));
this->ap.addBare("decrypt", [this](){jc.decrypt();});
this->ap.addBare("deterministic-id", [this](){jc.deterministicId();});
this->ap.addBare("empty", [this](){jc.empty();});
this->ap.addBare("encrypt", b(&ArgParser::argEncrypt));
this->ap.addBare("externalize-inline-images", [this](){jc.externalizeInlineImages();});
this->ap.addBare("filtered-stream-data", [this](){jc.filteredStreamData();});
this->ap.addBare("flatten-rotation", [this](){jc.flattenRotation();});
this->ap.addBare("generate-appearances", [this](){jc.generateAppearances();});
this->ap.addBare("ignore-xref-streams", [this](){jc.ignoreXrefStreams();});
this->ap.addBare("is-encrypted", [this](){jc.isEncrypted();});
this->ap.addBare("json", [this](){jc.json();});
this->ap.addBare("keep-inline-images", [this](){jc.keepInlineImages();});
this->ap.addBare("linearize", [this](){jc.linearize();});
this->ap.addBare("list-attachments", [this](){jc.listAttachments();});
this->ap.addBare("newline-before-endstream", [this](){jc.newlineBeforeEndstream();});
this->ap.addBare("no-original-object-ids", [this](){jc.noOriginalObjectIds();});
this->ap.addBare("no-warn", [this](){jc.noWarn();});
this->ap.addBare("optimize-images", [this](){jc.optimizeImages();});
this->ap.addBare("overlay", b(&ArgParser::argOverlay));
this->ap.addBare("pages", b(&ArgParser::argPages));
this->ap.addBare("password-is-hex-key", [this](){jc.passwordIsHexKey();});
this->ap.addBare("preserve-unreferenced", [this](){jc.preserveUnreferenced();});
this->ap.addBare("preserve-unreferenced-resources", [this](){jc.preserveUnreferencedResources();});
this->ap.addBare("progress", [this](){jc.progress();});
this->ap.addBare("qdf", [this](){jc.qdf();});
this->ap.addBare("raw-stream-data", [this](){jc.rawStreamData();});
this->ap.addBare("recompress-flate", [this](){jc.recompressFlate();});
this->ap.addBare("remove-page-labels", [this](){jc.removePageLabels();});
this->ap.addBare("replace-input", [this](){jc.replaceInput();});
this->ap.addBare("requires-password", [this](){jc.requiresPassword();});
this->ap.addBare("show-encryption", [this](){jc.showEncryption();});
this->ap.addBare("show-encryption-key", [this](){jc.showEncryptionKey();});
this->ap.addBare("show-linearization", [this](){jc.showLinearization();});
this->ap.addBare("show-npages", [this](){jc.showNpages();});
this->ap.addBare("show-pages", [this](){jc.showPages();});
this->ap.addBare("show-xref", [this](){jc.showXref();});
this->ap.addBare("static-aes-iv", [this](){jc.staticAesIv();});
this->ap.addBare("static-id", [this](){jc.staticId();});
this->ap.addBare("suppress-password-recovery", [this](){jc.suppressPasswordRecovery();});
this->ap.addBare("suppress-recovery", [this](){jc.suppressRecovery();});
this->ap.addBare("underlay", b(&ArgParser::argUnderlay));
this->ap.addBare("verbose", [this](){jc.verbose();});
this->ap.addBare("warning-exit-0", [this](){jc.warningExit0();});
this->ap.addBare("with-images", [this](){jc.withImages();});
this->ap.addOptionalParameter("collate", [this](char *x){jc.collate(x);});
this->ap.addOptionalParameter("split-pages", [this](char *x){jc.splitPages(x);});
this->ap.addRequiredParameter("compression-level", [this](char *x){jc.compressionLevel(x);}, "level");
this->ap.addRequiredParameter("copy-encryption", [this](char *x){jc.copyEncryption(x);}, "file");
this->ap.addRequiredParameter("encryption-file-password", [this](char *x){jc.encryptionFilePassword(x);}, "password");
this->ap.addRequiredParameter("force-version", [this](char *x){jc.forceVersion(x);}, "version");
this->ap.addRequiredParameter("ii-min-bytes", [this](char *x){jc.iiMinBytes(x);}, "minimum");
this->ap.addRequiredParameter("job-json-file", p(&ArgParser::argJobJsonFile), "file");
this->ap.addRequiredParameter("json-object", [this](char *x){jc.jsonObject(x);}, "trailer");
this->ap.addRequiredParameter("keep-files-open-threshold", [this](char *x){jc.keepFilesOpenThreshold(x);}, "count");
this->ap.addRequiredParameter("linearize-pass1", [this](char *x){jc.linearizePass1(x);}, "filename");
this->ap.addRequiredParameter("min-version", [this](char *x){jc.minVersion(x);}, "version");
this->ap.addRequiredParameter("oi-min-area", [this](char *x){jc.oiMinArea(x);}, "minimum");
this->ap.addRequiredParameter("oi-min-height", [this](char *x){jc.oiMinHeight(x);}, "minimum");
this->ap.addRequiredParameter("oi-min-width", [this](char *x){jc.oiMinWidth(x);}, "minimum");
this->ap.addRequiredParameter("password", p(&ArgParser::argPassword), "password");
this->ap.addRequiredParameter("password-file", p(&ArgParser::argPasswordFile), "password");
this->ap.addRequiredParameter("remove-attachment", [this](char *x){jc.removeAttachment(x);}, "attachment");
this->ap.addRequiredParameter("rotate", p(&ArgParser::argRotate), "[+|-]angle");
this->ap.addRequiredParameter("show-attachment", [this](char *x){jc.showAttachment(x);}, "attachment");
this->ap.addRequiredParameter("show-object", p(&ArgParser::argShowObject), "trailer");
this->ap.addChoices("compress-streams", [this](char *x){jc.compressStreams(x);}, true, yn_choices);
this->ap.addChoices("decode-level", p(&ArgParser::argDecodeLevel), true, decode_level_choices);
this->ap.addChoices("flatten-annotations", [this](char *x){jc.flattenAnnotations(x);}, true, flatten_choices);
this->ap.addChoices("json-key", [this](char *x){jc.jsonKey(x);}, true, json_key_choices);
this->ap.addChoices("keep-files-open", [this](char *x){jc.keepFilesOpen(x);}, true, yn_choices);
this->ap.addChoices("normalize-content", [this](char *x){jc.normalizeContent(x);}, true, yn_choices);
this->ap.addChoices("object-streams", p(&ArgParser::argObjectStreams), true, object_streams_choices);
this->ap.addChoices("password-mode", p(&ArgParser::argPasswordMode), true, password_mode_choices);
this->ap.addChoices("remove-unreferenced-resources", p(&ArgParser::argRemoveUnreferencedResources), true, remove_unref_choices);
this->ap.addChoices("stream-data", p(&ArgParser::argStreamData), true, stream_data_choices);
this->ap.registerOptionTable("pages", b(&ArgParser::argEndPages));
this->ap.addPositional(p(&ArgParser::argPagesPositional));
this->ap.addRequiredParameter("password", p(&ArgParser::argPagesPassword), "password");
this->ap.registerOptionTable("encryption", b(&ArgParser::argEndEncryption));
this->ap.addPositional(p(&ArgParser::argEncPositional));
this->ap.registerOptionTable("40-bit encryption", b(&ArgParser::argEnd40BitEncryption));
this->ap.addChoices("extract", p(&ArgParser::argEnc40Extract), true, yn_choices);
this->ap.addChoices("annotate", p(&ArgParser::argEnc40Annotate), true, yn_choices);
this->ap.addChoices("print", p(&ArgParser::argEnc40Print), true, yn_choices);
this->ap.addChoices("modify", p(&ArgParser::argEnc40Modify), true, yn_choices);
this->ap.registerOptionTable("128-bit encryption", b(&ArgParser::argEnd128BitEncryption));
this->ap.addBare("cleartext-metadata", b(&ArgParser::argEnc128CleartextMetadata));
this->ap.addBare("force-V4", b(&ArgParser::argEnc128ForceV4));
this->ap.addChoices("accessibility", p(&ArgParser::argEnc128Accessibility), true, yn_choices);
this->ap.addChoices("extract", p(&ArgParser::argEnc128Extract), true, yn_choices);
this->ap.addChoices("print", p(&ArgParser::argEnc128Print), true, print128_choices);
this->ap.addChoices("assemble", p(&ArgParser::argEnc128Assemble), true, yn_choices);
this->ap.addChoices("annotate", p(&ArgParser::argEnc128Annotate), true, yn_choices);
this->ap.addChoices("form", p(&ArgParser::argEnc128Form), true, yn_choices);
this->ap.addChoices("modify-other", p(&ArgParser::argEnc128ModifyOther), true, yn_choices);
this->ap.addChoices("modify", p(&ArgParser::argEnc128Modify), true, modify128_choices);
this->ap.addChoices("use-aes", p(&ArgParser::argEnc128UseAes), true, yn_choices);
this->ap.registerOptionTable("256-bit encryption", b(&ArgParser::argEnd256BitEncryption));
this->ap.addBare("force-R5", b(&ArgParser::argEnc256ForceR5));
this->ap.addBare("allow-insecure", b(&ArgParser::argEnc256AllowInsecure));
this->ap.registerOptionTable("underlay/overlay", b(&ArgParser::argEndUnderlayOverlay));
this->ap.addPositional(p(&ArgParser::argUOPositional));
this->ap.addRequiredParameter("to", p(&ArgParser::argUOTo), "page-range");
this->ap.addRequiredParameter("from", p(&ArgParser::argUOFrom), "page-range");
this->ap.addRequiredParameter("repeat", p(&ArgParser::argUORepeat), "page-range");
this->ap.addRequiredParameter("password", p(&ArgParser::argUOPassword), "password");
this->ap.registerOptionTable("attachment", b(&ArgParser::argEndAttachment));
this->ap.addPositional(p(&ArgParser::argAttPositional));
this->ap.addBare("replace", b(&ArgParser::argAttReplace));
this->ap.addRequiredParameter("key", p(&ArgParser::argAttKey), "attachment-key");
this->ap.addRequiredParameter("filename", p(&ArgParser::argAttFilename), "filename");
this->ap.addRequiredParameter("creationdate", p(&ArgParser::argAttCreationdate), "creation-date");
this->ap.addRequiredParameter("moddate", p(&ArgParser::argAttModdate), "modification-date");
this->ap.addRequiredParameter("mimetype", p(&ArgParser::argAttMimetype), "mime/type");
this->ap.addRequiredParameter("description", p(&ArgParser::argAttDescription), "description");
this->ap.registerOptionTable("copy attachment", b(&ArgParser::argEndCopyAttachment));
this->ap.addPositional(p(&ArgParser::argCopyAttPositional));
this->ap.addRequiredParameter("prefix", p(&ArgParser::argCopyAttPrefix), "prefix");
this->ap.addRequiredParameter("password", p(&ArgParser::argCopyAttPassword), "password");
this->ap.selectOptionTable("256-bit encryption");
this->ap.copyFromOtherTable("cleartext-metadata", "128-bit encryption");
this->ap.copyFromOtherTable("accessibility", "128-bit encryption");
this->ap.copyFromOtherTable("extract", "128-bit encryption");
this->ap.copyFromOtherTable("print", "128-bit encryption");
this->ap.copyFromOtherTable("assemble", "128-bit encryption");
this->ap.copyFromOtherTable("annotate", "128-bit encryption");
this->ap.copyFromOtherTable("form", "128-bit encryption");
this->ap.copyFromOtherTable("modify-other", "128-bit encryption");
this->ap.copyFromOtherTable("modify", "128-bit encryption");
